require File.dirname(__FILE__) + "/css_syntax"

# Document
#  Import
#  Variable
#  Comment
#  Ruleset
#    Selector
#    Mixin
#    Stylerule (prop/val)

grammar CSS
  rule document
    (block_comment_s / ruleset)* {
      def build
        env = CSS::Nodes::Document.new
        cascade env
      end
    }
  end

  rule ruleset
    ws selector_group ws '{' rule_group ws '}' {
      def build( env )
        ruleset = CSS::Nodes::Ruleset.new
        env << ruleset
        cascade ruleset
      end
    }
  end

  rule rule_group
    ( mixin / stylerule )* 
  end

  rule selector_group
    selector ( ws ',' ws selector )*
  end

  rule selector
    ( [a-z] / '>' / ':' / '(' / ')' / '-' / '_' / '#' / '.' / ' ' )+ {
      def build( ruleset )
        sel = CSS::Nodes::Selector.new self.text_value
        ruleset << sel
      end
    }
  end

  rule mixin
    ws name:('.' [a-z]*) '(' params:([a-zA-Z0-9 _\-@]*) ')' ws ';' {
      def build(ruleset)
        mixin = CSS::Nodes::Mixin.new name.text_value, params.text_value
        ruleset << mixin
      end
    } /
    ws name:('.' [a-z]*) ws ';' {
      def build(ruleset)
        mixin = CSS::Nodes::Mixin.new name.text_value
        ruleset << mixin
      end
    }
  end

  rule stylerule
    ws property ws ':' ws value ws ';' {
      def build( ruleset )
        rule = CSS::Nodes::Rule.new property.text_value, value.text_value
        ruleset << rule
      end
    }
  end

  rule property
    '-'? [a-z]+ ( '-' [a-z]* )*
  end

  rule value
    (!';' . )*
  end

  rule block_comment
    [\n ]* '/*' (!'*/' . )* '*/'
  end

  rule block_comment_s
    [\n ]* '/*' content:(!'*/' . )* '*/' {
      def build( env )
        env << CSS::Nodes::Comment.new( content.text_value )
      end
    }
  end

  rule ws
    [\n ]*
  end
end

